version: '3.8'

networks:
  kafka-cluster-network:
    driver: bridge

services:
  zookeeper5:
    image: zookeeper:${ZOOKEEPER_VERSION}
    container_name: ${ZOOKEEPER_NAME_5}
    hostname: ${ZOOKEEPER_NAME_5}
    ports:
      - ${ZOOKEEPER_PORT_5}:${ZOOKEEPER_PORT}
    environment:
      - ZOO_MY_ID=${ZOOKEEPER_ID_5}
      - ZOO_SERVERS=${ZOOKEEPER_SERVERS}
      - TZ=${TZ}
    volumes:
      - ./zookeeper5/data:/data
      - ./zookeeper5/datalog:/datalog
    networks:
      - kafka-cluster-network
      
  #zookeeper可视化
  zoonavigator1:
    image: elkozmon/zoonavigator:latest
    container_name: zoonavigator1
    hostname: zoonavigator1
    ports:
      - "9110:9000"
    environment:
      - HTTP_PORT=9000
      - CONNECTION_MYZK_CONN=${KAFKA_ZOOKEEPER_CONNECT}
      - AUTO_CONNECT_CONNECTION_ID=MYZK
    depends_on:
      - ${ZOOKEEPER_NAME_5}
    networks:
      - kafka-cluster-network

  kafka2:
    image: wurstmeister/kafka:${KAFKA_VERSION}
    container_name: ${KAFKA_NAME_2}
    hostname: ${KAFKA_NAME_2}
    privileged: true
    ports:
      - ${KAFKA_PORT_2}:${KAFKA_PORT_2}
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID_2}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://:${KAFKA_PORT},OUTSIDE://:${KAFKA_PORT_2}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://${KAFKA_NAME_2}:${KAFKA_PORT},OUTSIDE://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA_PORT_2}
      - JMX_PORT=${KAFKA_JMX_PORT}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=${KAFKA_NAME_2} -Dcom.sun.management.jmxremote.rmi.port=${KAFKA_JMX_PORT}
      - TZ=${TZ}
    volumes:
      - ./kafka2/data:/kafka
      - ./kafka2/var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - ${ZOOKEEPER_NAME_5}
    networks:
      - kafka-cluster-network

  kafka3:
    image: wurstmeister/kafka:${KAFKA_VERSION}
    container_name: ${KAFKA_NAME_3}
    hostname: ${KAFKA_NAME_3}
    privileged: true
    ports:
      - ${KAFKA_PORT_3}:${KAFKA_PORT_3}
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID_3}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://:${KAFKA_PORT},OUTSIDE://:${KAFKA_PORT_3}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://${KAFKA_NAME_3}:${KAFKA_PORT},OUTSIDE://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA_PORT_3}
      - JMX_PORT=${KAFKA_JMX_PORT}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=${KAFKA_NAME_3} -Dcom.sun.management.jmxremote.rmi.port=${KAFKA_JMX_PORT}
      - TZ=${TZ}
    volumes:
      - ./kafka3/data:/kafka
      - ./kafka3/var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - ${ZOOKEEPER_NAME_5}
    networks:
      - kafka-cluster-network


  kafka4:
    image: wurstmeister/kafka:${KAFKA_VERSION}
    container_name: ${KAFKA_NAME_4}
    hostname: ${KAFKA_NAME_4}
    privileged: true
    ports:
      - ${KAFKA_PORT_4}:${KAFKA_PORT_4}
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID_4}
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
      - KAFKA_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://:${KAFKA_PORT},OUTSIDE://:${KAFKA_PORT_4}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_INTER_BROKER_LISTENER_NAME}://${KAFKA_NAME_4}:${KAFKA_PORT},OUTSIDE://${DOCKER_HOST_IP:-127.0.0.1}:${KAFKA_PORT_4}
      - JMX_PORT=${KAFKA_JMX_PORT}
      - KAFKA_JMX_OPTS=-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=${KAFKA_NAME_4} -Dcom.sun.management.jmxremote.rmi.port=${KAFKA_JMX_PORT}
      - TZ=${TZ}
    volumes:
      - ./kafka4/data:/kafka
      - ./kafka4/var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - ${ZOOKEEPER_NAME_5}
    networks:
      - kafka-cluster-network

  #WEB UI
  kafdrop1:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop1
    hostname: kafdrop1
    ports:
      - "9111:9000"
    environment:
      - KAFKA_BROKERCONNECT=${KAFKA_BROKERCONNECT}
      - JVM_OPTS=-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify
      - TZ=${TZ}
    depends_on:
      - kafka2
      - kafka3
      - kafka4
    networks:
      - kafka-cluster-network

#  kafka-schema-registry:
#    image: confluentinc/cp-schema-registry:latest
#    hostname: kafka-schema-registry
#    container_name: kafka-schema-registry
#    ports:
#      - "9112:8081"
#    environment:
#      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=${SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS}
#      - SCHEMA_REGISTRY_HOST_NAME=kafka-schema-registry
#      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
#    depends_on:
#      - ${ZOOKEEPER_NAME_2}
#      - ${ZOOKEEPER_NAME_3}
#      - ${ZOOKEEPER_NAME_4}
#      - ${KAFKA_NAME_2}
#      - ${KAFKA_NAME_3}
#      - ${KAFKA_NAME_4}
#    networks:
#      - kafka-cluster-network
#
#  kafka-rest-proxy:
#    image: confluentinc/cp-kafka-rest:latest
#    container_name: kafka-rest-proxy
#    hostname: kafka-rest-proxy
#    ports:
#      - "9113:8082"
#    environment:
#      - KAFKA_REST_LISTENERS=http://0.0.0.0:8082/
#      - KAFKA_REST_SCHEMA_REGISTRY_URL=http://kafka-schema-registry:8081/
#      - KAFKA_REST_HOST_NAME=kafka-rest-proxy
#      - KAFKA_REST_BOOTSTRAP_SERVERS=${SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS}
#    depends_on:
#      - ${ZOOKEEPER_NAME_2}
#      - ${ZOOKEEPER_NAME_3}
#      - ${ZOOKEEPER_NAME_4}
#      - ${KAFKA_NAME_5}
#      - kafka-schema-registry
#    networks:
#      - kafka-cluster-network
#
#  ksqldb-server:
#    image: confluentinc/cp-ksqldb-server:latest
#    container_name: ksqldb-server
#    hostname: ksqldb-server
#    ports:
#      - "9114:8088"
#    environment:
#      - KSQL_BOOTSTRAP_SERVERS=${SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS}
#      - KSQL_LISTENERS=http://0.0.0.0:8088/
#      - KSQL_HOST_NAME=ksqldb-server
#    depends_on:
#      - ${ZOOKEEPER_NAME_5}
#      - ${KAFKA_NAME_2}
#      - ${KAFKA_NAME_3}
#      - ${KAFKA_NAME_4}
#    networks:
#      - kafka-cluster-network
#
#  ksqldb-cli:
#    image: confluentinc/cp-ksqldb-cli:latest
#    container_name: ksqldb-cli
#    hostname: ksqldb-cli
#    depends_on:
#      - ${ZOOKEEPER_NAME_5}
#      - ${KAFKA_NAME_2}
#      - ${KAFKA_NAME_3}
#      - ${KAFKA_NAME_4}
#      - ksqldb-server
#    entrypoint: /bin/sh
#    tty: true
#    networks:
#      - kafka-cluster-network